import React, { createContext, useState, useContext, useEffect } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { Message, ChatRoom, MessageContentType, MessageContent } from '../types';
import { format } from 'date-fns';
import { useAuth } from './AuthContext';

// –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
export const DEMO_EMPLOYEES = [
  { id: '1', name: '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω', position: '–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞', avatarUrl: 'https://ui-avatars.com/api/?name=Ivan+Ivanov&background=0D8ABC&color=fff' },
  { id: '2', name: '–ü–µ—Ç—Ä–æ–≤–∞ –ï–ª–µ–Ω–∞', position: '–í–µ–¥—É—â–∏–π –¥–∏–∑–∞–π–Ω–µ—Ä', avatarUrl: 'https://ui-avatars.com/api/?name=Elena+Petrova&background=2E7D32&color=fff' },
  { id: '3', name: '–°–∏–¥–æ—Ä–æ–≤ –ê–ª–µ–∫—Å–µ–π', position: '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', avatarUrl: 'https://ui-avatars.com/api/?name=Alexey+Sidorov&background=C62828&color=fff' },
  { id: '4', name: '–ö–æ–∑–ª–æ–≤–∞ –ú–∞—Ä–∏—è', position: '–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫', avatarUrl: 'https://ui-avatars.com/api/?name=Maria+Kozlova&background=6A1B9A&color=fff' },
  { id: '5', name: '–ù–∏–∫–æ–ª–∞–µ–≤ –î–º–∏—Ç—Ä–∏–π', position: '–ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫', avatarUrl: 'https://ui-avatars.com/api/?name=Dmitry+Nikolaev&background=00695C&color=fff' },
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
export const getEmployeeInfo = (userId: string) => {
  return DEMO_EMPLOYEES.find(emp => emp.id === userId) || 
    { id: userId, name: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', position: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö', avatarUrl: 'https://ui-avatars.com/api/?name=Unknown&background=9E9E9E&color=fff' };
};

// –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —á–∞—Ç–æ–≤
const DEMO_CHAT_ROOMS: ChatRoom[] = [
  {
    id: '1',
    name: '–û–±—â–∏–π —á–∞—Ç',
    isGroupChat: true,
    participants: ['1', '2', '3', '4', '5'],
    createdAt: new Date(Date.now() - 86400000 * 30),
    updatedAt: new Date(Date.now() - 3600000),
  },
  {
    id: '2',
    name: '–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
    isGroupChat: true,
    participants: ['1', '3', '5'],
    createdAt: new Date(Date.now() - 86400000 * 20),
    updatedAt: new Date(Date.now() - 86400000),
  },
  {
    id: '3',
    name: '–ü–µ—Ç—Ä–æ–≤–∞ –ï–ª–µ–Ω–∞',
    isGroupChat: false,
    participants: ['1', '2'],
    createdAt: new Date(Date.now() - 86400000 * 10),
    updatedAt: new Date(Date.now() - 43200000),
  },
];

// –°–æ–∑–¥–∞–Ω–∏–µ MessageContent –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
const createTextContent = (text: string): MessageContent => {
  return {
    type: MessageContentType.TEXT,
    text
  };
};

// –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
const DEMO_MESSAGES: Message[] = [
  {
    id: '1',
    senderId: '2',
    receiverId: null,
    content: createTextContent('–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! –ù–∞–ø–æ–º–∏–Ω–∞—é –æ –≤—Å—Ç—Ä–µ—á–µ –∑–∞–≤—Ç—Ä–∞ –≤ 10:00.'),
    timestamp: new Date(Date.now() - 86400000),
    isRead: true,
  },
  {
    id: '2',
    senderId: '3',
    receiverId: null,
    content: createTextContent('–°–ø–∞—Å–∏–±–æ –∑–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ë—É–¥—É –≤–æ–≤—Ä–µ–º—è.'),
    timestamp: new Date(Date.now() - 86400000 + 3600000),
    isRead: true,
  },
  {
    id: '3',
    senderId: '1',
    receiverId: null,
    content: createTextContent('–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç—ã –∫ –≤—Å—Ç—Ä–µ—á–µ.'),
    timestamp: new Date(Date.now() - 43200000),
    isRead: true,
  },
  {
    id: '4',
    senderId: '2',
    receiverId: '1',
    content: createTextContent('–ò–≤–∞–Ω, –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å —Å –∑–∞–¥–∞—á–µ–π –ø–æ –ø—Ä–æ–µ–∫—Ç—É?'),
    timestamp: new Date(Date.now() - 86400000 * 2),
    isRead: true,
  },
  {
    id: '5',
    senderId: '1',
    receiverId: '2',
    content: createTextContent('–ö–æ–Ω–µ—á–Ω–æ, –¥–∞–≤–∞–π –æ–±—Å—É–¥–∏–º –∑–∞–≤—Ç—Ä–∞ –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ.'),
    timestamp: new Date(Date.now() - 86400000 * 2 + 3600000),
    isRead: true,
  },
  {
    id: '6',
    senderId: '3',
    receiverId: null,
    content: createTextContent('–£ –º–µ–Ω—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∑–∞–¥–∞–Ω–∏—é.'),
    timestamp: new Date(Date.now() - 7200000),
    isRead: false,
  },
  // –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
  {
    id: '7',
    senderId: '4',
    receiverId: null,
    content: {
      type: MessageContentType.EMOJI,
      emoji: 'üëç'
    },
    timestamp: new Date(Date.now() - 3600000),
    isRead: false,
  },
  {
    id: '8',
    senderId: '5',
    receiverId: null,
    content: {
      type: MessageContentType.FILE,
      fileName: '–æ—Ç—á–µ—Ç_–ø—Ä–æ–µ–∫—Ç.pdf',
      fileUrl: 'https://example.com/files/report.pdf',
      fileMimeType: 'application/pdf'
    },
    timestamp: new Date(Date.now() - 1800000),
    isRead: false,
  },
  {
    id: '9',
    senderId: '2',
    receiverId: null,
    content: {
      type: MessageContentType.IMAGE,
      imageUrl: 'https://example.com/images/prototype.jpg',
      text: '–ù–æ–≤—ã–π –ø—Ä–æ—Ç–æ—Ç–∏–ø –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞'
    },
    timestamp: new Date(Date.now() - 1200000),
    isRead: false,
  }
];

interface ChatContextType {
  chatRooms: ChatRoom[];
  messages: Message[];
  addMessage: (message: Omit<Message, 'id'>) => Promise<void>;
  addVoiceMessage: (senderId: string, receiverId: string | null, chatRoomId: string, voiceUrl: string, duration: number) => Promise<void>;
  addFileMessage: (senderId: string, receiverId: string | null, chatRoomId: string, fileUrl: string, fileName: string, fileMimeType: string) => Promise<void>;
  addImageMessage: (senderId: string, receiverId: string | null, chatRoomId: string, imageUrl: string, caption?: string) => Promise<void>;
  addEmojiMessage: (senderId: string, receiverId: string | null, chatRoomId: string, emoji: string) => Promise<void>;
  getMessagesForChat: (chatRoomId: string) => Message[];
  getUnreadCount: () => number;
  markMessageAsRead: (messageId: string) => Promise<void>;
  refreshChatData: () => Promise<void>;
  resetAndRefreshChatData: () => Promise<void>;
  createGroupChat: (name: string, participants: string[]) => Promise<string>;
}

const ChatContext = createContext<ChatContextType | undefined>(undefined);

export const ChatProvider: React.FC<{children: React.ReactNode}> = ({ children }) => {
  const { user } = useAuth();
  const [chatRooms, setChatRooms] = useState<ChatRoom[]>([]);
  const [messages, setMessages] = useState<Message[]>([]);

  useEffect(() => {
    loadChatData();
  }, [user]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —á–∞—Ç–æ–≤ —Å –∫–∞–∂–¥—ã–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º
  const createPersonalChats = (existingRooms: ChatRoom[]): ChatRoom[] => {
    if (!user) return existingRooms;
    
    const updatedRooms = [...existingRooms];
    const updatedMessages = [...messages];
    let hasAddedNewChats = false;
    
    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —á–∞—Ç—ã —Å–æ –≤—Å–µ–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
    DEMO_EMPLOYEES.forEach(employee => {
      // –ù–µ —Å–æ–∑–¥–∞–µ–º —á–∞—Ç —Å —Å–∞–º–∏–º —Å–æ–±–æ–π
      if (employee.id === user.id) return;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —á–∞—Ç —Å —ç—Ç–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º
      const existingChat = updatedRooms.find(room => 
        !room.isGroupChat && 
        room.participants.includes(user.id) && 
        room.participants.includes(employee.id) && 
        room.participants.length === 2
      );
      
      // –ï—Å–ª–∏ —á–∞—Ç–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
      if (!existingChat) {
        const uniqueId = `${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        const welcomeMessageId = `welcome_${uniqueId}`;
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const welcomeMessage: Message = {
          id: welcomeMessageId,
          senderId: employee.id,
          receiverId: user.id,
          chatRoomId: `personal_${uniqueId}`,
          content: createTextContent(`–ü—Ä–∏–≤–µ—Ç! –Ø ${employee.name}, ${employee.position}. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`),
          timestamp: new Date(),
          isRead: false
        };
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
        const newChat: ChatRoom = {
          id: `personal_${uniqueId}`,
          name: `${employee.name} (${employee.position})`,
          isGroupChat: false,
          participants: [user.id, employee.id],
          createdAt: new Date(),
          updatedAt: new Date(),
          lastMessage: welcomeMessage
        };
        
        updatedRooms.push(newChat);
        updatedMessages.push(welcomeMessage);
        hasAddedNewChats = true;
      }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —á–∞—Ç—ã
    if (hasAddedNewChats) {
      setMessages(updatedMessages);
      saveMessages(updatedMessages);
    }
    
    return updatedRooms;
  };

  const loadChatData = async () => {
    try {
      if (!user) return;
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–Ω–∞—Ç—ã —á–∞—Ç–æ–≤
      const storedChatRooms = await AsyncStorage.getItem('@chatRooms');
      let initialChatRooms: ChatRoom[] = [];
      
      if (storedChatRooms) {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ä–µ–∫—Ç—ã Date
        initialChatRooms = JSON.parse(storedChatRooms, (key, value) => {
          if (key === 'createdAt' || key === 'updatedAt' || (key === 'timestamp' && value)) {
            return new Date(value);
          }
          return value;
        });
      } else {
        // –ï—Å–ª–∏ —á–∞—Ç–æ–≤ –µ—â–µ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
        initialChatRooms = DEMO_CHAT_ROOMS;
      }
      
      // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —á–∞—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
      const updatedChatRooms = createPersonalChats(initialChatRooms);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
      setChatRooms(updatedChatRooms);
      await saveChatRooms(updatedChatRooms);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
      const storedMessages = await AsyncStorage.getItem('@messages');
      if (storedMessages) {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ä–µ–∫—Ç—ã Date
        const parsedMessages = JSON.parse(storedMessages, (key, value) => {
          if (key === 'timestamp') {
            return new Date(value);
          }
          return value;
        });
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π (—Å –ø–æ–ª–µ–º text) –≤ –Ω–æ–≤—ã–π (—Å –ø–æ–ª–µ–º content)
        const migratedMessages = parsedMessages.map((msg: any) => {
          if (msg.text && !msg.content) {
            return {
              ...msg,
              content: createTextContent(msg.text)
            };
          }
          return msg;
        });
        
        setMessages(migratedMessages);
      } else {
        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –µ—â–µ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
        setMessages(DEMO_MESSAGES);
        await AsyncStorage.setItem('@messages', JSON.stringify(DEMO_MESSAGES));
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
      setChatRooms(DEMO_CHAT_ROOMS);
      setMessages(DEMO_MESSAGES);
    }
  };

  const saveChatRooms = async (updatedChatRooms: ChatRoom[]) => {
    try {
      await AsyncStorage.setItem('@chatRooms', JSON.stringify(updatedChatRooms));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç —á–∞—Ç–∞:', error);
    }
  };

  const saveMessages = async (updatedMessages: Message[]) => {
    try {
      await AsyncStorage.setItem('@messages', JSON.stringify(updatedMessages));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    }
  };

  const addMessage = async (message: Omit<Message, 'id'>) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–º –∂–µ —Ç–µ–∫—Å—Ç–æ–º –∏ –≤—Ä–µ–º–µ–Ω–µ–º
      const now = new Date().getTime();
      const recentMessages = messages
        .filter(msg => 
          (now - msg.timestamp.getTime()) < 10000 && // –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 10 —Å–µ–∫—É–Ω–¥ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
          msg.senderId === message.senderId && 
          msg.receiverId === message.receiverId
        )
        .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime()) // —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏, —Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ
        .slice(0, 3); // –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (message.content.type === MessageContentType.TEXT && message.content.text) {
        const duplicateFound = recentMessages.some(msg => 
          msg.content.type === MessageContentType.TEXT && 
          msg.content.text === message.content.text
        );
        
        // –ï—Å–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç –Ω–∞–π–¥–µ–Ω, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (duplicateFound) {
          console.log('–î—É–±–ª–∏–∫–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º:', message.content.text);
          return;
        }
      }
      
      const newMessage = {
        ...message,
        id: Date.now().toString(),
      } as Message;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
      const updatedMessages = [...messages, newMessage];
      setMessages(updatedMessages);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ AsyncStorage
      await saveMessages(updatedMessages);
      
      // –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–º–Ω–∞—Ç—ã —á–∞—Ç–∞
      let chatRoomId = message.chatRoomId || '';
      
      // –ï—Å–ª–∏ chatRoomId –Ω–µ —É–∫–∞–∑–∞–Ω, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–≥–æ –ø–æ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ
      if (!chatRoomId) {
        if (message.receiverId && !message.receiverId.startsWith('group_')) {
          // –≠—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É
          const participants = [message.senderId, message.receiverId];
          const existingRoom = chatRooms.find(room => 
            !room.isGroupChat && 
            participants.every(p => room.participants.includes(p)) &&
            room.participants.length === participants.length
          );
          
          if (existingRoom) {
            chatRoomId = existingRoom.id;
          } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞
            const receiverInfo = getEmployeeInfo(message.receiverId);
            const newRoom: ChatRoom = {
              id: `personal_${Date.now()}`,
              name: receiverInfo.name,
              isGroupChat: false,
              participants,
              createdAt: new Date(),
              updatedAt: new Date(),
            };
            const updatedRooms = [...chatRooms, newRoom];
            setChatRooms(updatedRooms);
            await saveChatRooms(updatedRooms);
            chatRoomId = newRoom.id;
          }
        } else if (message.receiverId && message.receiverId.startsWith('group_')) {
          // –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç, ID —á–∞—Ç–∞ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ receiverId
          chatRoomId = message.receiverId;
        } else {
          // –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—â–∏–π —á–∞—Ç
          chatRoomId = '1'; // ID –æ–±—â–µ–≥–æ —á–∞—Ç–∞
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º lastMessage –∏ updatedAt –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–Ω–∞—Ç—ã
      const updatedChatRooms = chatRooms.map(room => 
        room.id === chatRoomId ? 
        {
          ...room, 
          lastMessage: newMessage,
          updatedAt: new Date()
        } : 
        room
      );
      
      setChatRooms(updatedChatRooms);
      await saveChatRooms(updatedChatRooms);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  };

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
  const addVoiceMessage = async (
    senderId: string, 
    receiverId: string | null, 
    chatRoomId: string, 
    voiceUrl: string, 
    duration: number
  ) => {
    const message: Omit<Message, 'id'> = {
      senderId,
      receiverId,
      chatRoomId,
      content: {
        type: MessageContentType.VOICE,
        voiceUrl,
        voiceDuration: duration
      },
      timestamp: new Date(),
      isRead: false
    };
    
    await addMessage(message);
  };
  
  const addFileMessage = async (
    senderId: string, 
    receiverId: string | null, 
    chatRoomId: string, 
    fileUrl: string, 
    fileName: string, 
    fileMimeType: string
  ) => {
    const message: Omit<Message, 'id'> = {
      senderId,
      receiverId,
      chatRoomId,
      content: {
        type: MessageContentType.FILE,
        fileUrl,
        fileName,
        fileMimeType
      },
      timestamp: new Date(),
      isRead: false
    };
    
    await addMessage(message);
  };
  
  const addImageMessage = async (
    senderId: string, 
    receiverId: string | null, 
    chatRoomId: string, 
    imageUrl: string, 
    caption?: string
  ) => {
    const message: Omit<Message, 'id'> = {
      senderId,
      receiverId,
      chatRoomId,
      content: {
        type: MessageContentType.IMAGE,
        imageUrl,
        text: caption
      },
      timestamp: new Date(),
      isRead: false
    };
    
    await addMessage(message);
  };
  
  const addEmojiMessage = async (
    senderId: string, 
    receiverId: string | null, 
    chatRoomId: string, 
    emoji: string
  ) => {
    const message: Omit<Message, 'id'> = {
      senderId,
      receiverId,
      chatRoomId,
      content: {
        type: MessageContentType.EMOJI,
        emoji
      },
      timestamp: new Date(),
      isRead: false
    };
    
    await addMessage(message);
  };

  const createGroupChat = async (name: string, participants: string[]): Promise<string> => {
    try {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É
      const newRoom: ChatRoom = {
        id: `group_${Date.now()}`,
        name: name,
        isGroupChat: true,
        participants: [...participants, user?.id || ''],
        createdAt: new Date(),
        updatedAt: new Date(),
      };
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
      const updatedRooms = [...chatRooms, newRoom];
      setChatRooms(updatedRooms);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ AsyncStorage
      await AsyncStorage.setItem('@chatRooms', JSON.stringify(updatedRooms));
      
      // –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —á–∞—Ç —Å–æ–∑–¥–∞–Ω –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º ID
      await loadChatData();
      
      return newRoom.id;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞:', error);
      throw error;
    }
  };

  const getMessagesForChat = (chatRoomId: string) => {
    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–Ω–∞—Ç—É —á–∞—Ç–∞
    const chatRoom = chatRooms.find(room => room.id === chatRoomId);
    if (!chatRoom) return [];
    
    // –°–æ–∑–¥–∞–µ–º Set –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö ID —Å–æ–æ–±—â–µ–Ω–∏–π
    const addedMessageIds = new Set<string>();
    let result: Message[] = [];
    
    // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º chatRoomId (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
    const messagesWithChatRoomId = messages.filter(message => message.chatRoomId === chatRoomId);
    messagesWithChatRoomId.forEach(msg => {
      result.push(msg);
      addedMessageIds.add(msg.id);
    });
    
    // –ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (chatRoom.isGroupChat) {
      // –î–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ chatRoomId
      if (chatRoom.id === '1' || chatRoom.id === '2') {
        // –î–ª—è –¥–µ–º–æ-—á–∞—Ç–æ–≤ "–û–±—â–∏–π —á–∞—Ç" –∏ "–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏" –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏—è
        messages.forEach(message => {
          if (!addedMessageIds.has(message.id) && 
              message.chatRoomId === undefined && 
              message.receiverId === null && 
              chatRoom.participants.includes(message.senderId)) {
            result.push(message);
            addedMessageIds.add(message.id);
          }
        });
      } else {
        // –î–ª—è –Ω–æ–≤—ã—Ö –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        // –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ (–≥—Ä—É–±–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –¥–µ–º–æ)
        const chatCreationTime = chatRoom.createdAt.getTime();
        messages.forEach(message => {
          if (!addedMessageIds.has(message.id) && 
              message.chatRoomId === undefined && 
              message.receiverId === null && 
              chatRoom.participants.includes(message.senderId) &&
              message.timestamp.getTime() > chatCreationTime) {
            result.push(message);
            addedMessageIds.add(message.id);
          }
        });
      }
    } else {
      // –î–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ - —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –º–µ–∂–¥—É —ç—Ç–∏–º–∏ –¥–≤—É–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
      const participants = chatRoom.participants;
      messages.forEach(message => {
        if (!addedMessageIds.has(message.id) && 
            message.chatRoomId === undefined && 
            participants.includes(message.senderId) && 
            participants.includes(message.receiverId || '') && 
            participants.length === 2) {
          result.push(message);
          addedMessageIds.add(message.id);
        }
      });
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return result.sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime());
  };

  const getUnreadCount = () => {
    if (!user) return 0;
    
    // –°—á–∏—Ç–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return messages.filter(message => 
      !message.isRead && 
      (message.receiverId === user.id || 
       (message.receiverId === null && message.senderId !== user.id))
    ).length;
  };

  const markMessageAsRead = async (messageId: string) => {
    try {
      const updatedMessages = messages.map(message => 
        message.id === messageId ? 
        { ...message, isRead: true } : 
        message
      );
      
      setMessages(updatedMessages);
      await saveMessages(updatedMessages);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ:', error);
    }
  };

  const refreshChatData = async () => {
    await loadChatData();
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  const resetAndRefreshChatData = async () => {
    try {
      // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
      await AsyncStorage.removeItem('@chatRooms');
      await AsyncStorage.removeItem('@messages');
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º–∏
      setChatRooms(DEMO_CHAT_ROOMS);
      setMessages(DEMO_MESSAGES);
      
      // –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –Ω–æ–≤—ã—Ö —á–∞—Ç–æ–≤
      await loadChatData();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞:', error);
    }
  };

  return (
    <ChatContext.Provider 
      value={{ 
        chatRooms, 
        messages, 
        addMessage, 
        addVoiceMessage,
        addFileMessage,
        addImageMessage,
        addEmojiMessage,
        getMessagesForChat,
        getUnreadCount,
        markMessageAsRead,
        refreshChatData,
        resetAndRefreshChatData,
        createGroupChat
      }}
    >
      {children}
    </ChatContext.Provider>
  );
};

export const useChat = () => {
  const context = useContext(ChatContext);
  if (context === undefined) {
    throw new Error('useChat must be used within a ChatProvider');
  }
  return context;
};